"""
This program will start multiple processes that are all generating random numbers with the
same seed. This results in the same sequence of random numbers being generated by each process. Moreover, if this
program is run again with the same seed, the processes will
still generate the same sequence of random numbers.

In the output below the format is `[rank](pid) - random numbers`.

$ python random_gens.py --seed=2178
[3](54680) - [0.246 0.116 0.471 0.015 0.265 0.158 0.97  0.09  0.017 0.821]
[0](54677) - [0.246 0.116 0.471 0.015 0.265 0.158 0.97  0.09  0.017 0.821]
[1](54678) - [0.246 0.116 0.471 0.015 0.265 0.158 0.97  0.09  0.017 0.821]
[4](54681) - [0.246 0.116 0.471 0.015 0.265 0.158 0.97  0.09  0.017 0.821]
[2](54679) - [0.246 0.116 0.471 0.015 0.265 0.158 0.97  0.09  0.017 0.821]

$ python random_gens.py --seed=2178
[1](54698) - [0.246 0.116 0.471 0.015 0.265 0.158 0.97  0.09  0.017 0.821]
[0](54697) - [0.246 0.116 0.471 0.015 0.265 0.158 0.97  0.09  0.017 0.821]
[3](54700) - [0.246 0.116 0.471 0.015 0.265 0.158 0.97  0.09  0.017 0.821]
[2](54699) - [0.246 0.116 0.471 0.015 0.265 0.158 0.97  0.09  0.017 0.821]
[4](54701) - [0.246 0.116 0.471 0.015 0.265 0.158 0.97  0.09  0.017 0.821]

"""

from multiprocessing import Process
import os
import numpy as np
from cprint import cprint
import click

np.set_printoptions(edgeitems=30, linewidth=100000, precision=3, suppress=True)


def generate(rank, seed):
    rng = np.random.default_rng(seed)
    # nums = rng.random(10)
    for _ in range(10):
        num = rng.random()
        cprint(rank, f"[{rank}]({os.getpid()}) - {num:.5f}")


@click.command()
@click.option("--nprocs", default=5)
@click.option("--seed", required=True, type=int)
def main(nprocs, seed):
    procs = [Process(target=generate, args=(i, seed)) for i in range(nprocs)]
    for proc in procs:
        proc.start()
    for proc in procs:
        proc.join()


if __name__ == "__main__":
    main()
